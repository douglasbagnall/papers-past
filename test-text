#!/usr/bin/python
# -*- coding: utf-8 -*-
import argparse
import random
import os
from alphabet import read_header
import charmodel
from json import loads


def parse_json_utf8(s):
    d = loads(s)
    d2 = {}
    for k, v in d.items():
        k = k.encode('utf8')
        if isinstance(v, unicode):
            v = v.encode('utf8')
        d2[k] = v
    print d2
    return d2


def read_file(fn):
    f = open(fn)
    header, n_bytes = read_header(f)
    text = ''.join(line for line in f)
    f.close()
    return header, n_bytes, text


def load_and_encode_texts(directories, alphabet):
    articles = {}
    for d in directories:
        for fn in os.listdir(d):
            ffn = os.path.join(d, fn)
            header, n_bytes, text = read_file(ffn)
            articles[header['id']] = alphabet.encode_text(text)

    return articles


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('directories', nargs='+',
                        help="find text in these directories")
    parser.add_argument('-r', '--rng-seed', type=int, default=-1,
                        help="rng seed (-1 for auto)")
    parser.add_argument('--enable-fp-exceptions', action='store_true',
                        help="crash on bad floating point errors")
    parser.add_argument('-i', '--ignore-start', type=int, default=0,
                        help="don't train on this many characters at start")
    parser.add_argument('-f', '--filename',
                        help="load net from here")
    parser.add_argument('--no-csv-header',
                        help="don't start output with column names")
    parser.add_argument('-o', '--output',
                        help="write numbers here (CSV)")

    args = parser.parse_args()

    if args.enable_fp_exceptions:
        charmodel.enable_fp_exceptions()

    net = charmodel.Net.load(args.filename, parse_json_utf8)

    if args.rng_seed != -1:
        random.seed(args.rng_seed)

    articles = load_and_encode_texts(args.directories, net.alphabet)

    f = open(args.output, 'w')
    if not args.no_csv_header:
        print >> f, ', '.join(net.class_names)
    for k, v in articles.iteritems():
        scores = net.test(v, args.ignore_start, True)
        print >> f, ', '.join('%.3f' % x for x in scores)
    f.close()

main()
